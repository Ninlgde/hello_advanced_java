/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ninlgde.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-03-22")
public class ContainerTypes implements org.apache.thrift.TBase<ContainerTypes, ContainerTypes._Fields>, java.io.Serializable, Cloneable, Comparable<ContainerTypes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContainerTypes");

  private static final org.apache.thrift.protocol.TField STRING_VALUE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValueList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField STRING_VALUE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValueSet", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField STRING_VALUE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValueMap", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField USER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userList", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ContainerTypesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ContainerTypesTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> stringValueList; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> stringValueSet; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> stringValueMap; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<com.ninlgde.rpc.thrift.User> userList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRING_VALUE_LIST((short)1, "stringValueList"),
    STRING_VALUE_SET((short)2, "stringValueSet"),
    STRING_VALUE_MAP((short)3, "stringValueMap"),
    USER_LIST((short)4, "userList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRING_VALUE_LIST
          return STRING_VALUE_LIST;
        case 2: // STRING_VALUE_SET
          return STRING_VALUE_SET;
        case 3: // STRING_VALUE_MAP
          return STRING_VALUE_MAP;
        case 4: // USER_LIST
          return USER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRING_VALUE_LIST, new org.apache.thrift.meta_data.FieldMetaData("stringValueList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STRING_VALUE_SET, new org.apache.thrift.meta_data.FieldMetaData("stringValueSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STRING_VALUE_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringValueMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USER_LIST, new org.apache.thrift.meta_data.FieldMetaData("userList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ninlgde.rpc.thrift.User.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContainerTypes.class, metaDataMap);
  }

  public ContainerTypes() {
  }

  public ContainerTypes(
    java.util.List<java.lang.String> stringValueList,
    java.util.Set<java.lang.String> stringValueSet,
    java.util.Map<java.lang.String,java.lang.String> stringValueMap,
    java.util.List<com.ninlgde.rpc.thrift.User> userList)
  {
    this();
    this.stringValueList = stringValueList;
    this.stringValueSet = stringValueSet;
    this.stringValueMap = stringValueMap;
    this.userList = userList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContainerTypes(ContainerTypes other) {
    if (other.isSetStringValueList()) {
      java.util.List<java.lang.String> __this__stringValueList = new java.util.ArrayList<java.lang.String>(other.stringValueList);
      this.stringValueList = __this__stringValueList;
    }
    if (other.isSetStringValueSet()) {
      java.util.Set<java.lang.String> __this__stringValueSet = new java.util.HashSet<java.lang.String>(other.stringValueSet);
      this.stringValueSet = __this__stringValueSet;
    }
    if (other.isSetStringValueMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__stringValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.stringValueMap);
      this.stringValueMap = __this__stringValueMap;
    }
    if (other.isSetUserList()) {
      java.util.List<com.ninlgde.rpc.thrift.User> __this__userList = new java.util.ArrayList<com.ninlgde.rpc.thrift.User>(other.userList.size());
      for (com.ninlgde.rpc.thrift.User other_element : other.userList) {
        __this__userList.add(new com.ninlgde.rpc.thrift.User(other_element));
      }
      this.userList = __this__userList;
    }
  }

  public ContainerTypes deepCopy() {
    return new ContainerTypes(this);
  }

  @Override
  public void clear() {
    this.stringValueList = null;
    this.stringValueSet = null;
    this.stringValueMap = null;
    this.userList = null;
  }

  public int getStringValueListSize() {
    return (this.stringValueList == null) ? 0 : this.stringValueList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getStringValueListIterator() {
    return (this.stringValueList == null) ? null : this.stringValueList.iterator();
  }

  public void addToStringValueList(java.lang.String elem) {
    if (this.stringValueList == null) {
      this.stringValueList = new java.util.ArrayList<java.lang.String>();
    }
    this.stringValueList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getStringValueList() {
    return this.stringValueList;
  }

  public ContainerTypes setStringValueList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> stringValueList) {
    this.stringValueList = stringValueList;
    return this;
  }

  public void unsetStringValueList() {
    this.stringValueList = null;
  }

  /** Returns true if field stringValueList is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValueList() {
    return this.stringValueList != null;
  }

  public void setStringValueListIsSet(boolean value) {
    if (!value) {
      this.stringValueList = null;
    }
  }

  public int getStringValueSetSize() {
    return (this.stringValueSet == null) ? 0 : this.stringValueSet.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getStringValueSetIterator() {
    return (this.stringValueSet == null) ? null : this.stringValueSet.iterator();
  }

  public void addToStringValueSet(java.lang.String elem) {
    if (this.stringValueSet == null) {
      this.stringValueSet = new java.util.HashSet<java.lang.String>();
    }
    this.stringValueSet.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.String> getStringValueSet() {
    return this.stringValueSet;
  }

  public ContainerTypes setStringValueSet(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> stringValueSet) {
    this.stringValueSet = stringValueSet;
    return this;
  }

  public void unsetStringValueSet() {
    this.stringValueSet = null;
  }

  /** Returns true if field stringValueSet is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValueSet() {
    return this.stringValueSet != null;
  }

  public void setStringValueSetIsSet(boolean value) {
    if (!value) {
      this.stringValueSet = null;
    }
  }

  public int getStringValueMapSize() {
    return (this.stringValueMap == null) ? 0 : this.stringValueMap.size();
  }

  public void putToStringValueMap(java.lang.String key, java.lang.String val) {
    if (this.stringValueMap == null) {
      this.stringValueMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.stringValueMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getStringValueMap() {
    return this.stringValueMap;
  }

  public ContainerTypes setStringValueMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> stringValueMap) {
    this.stringValueMap = stringValueMap;
    return this;
  }

  public void unsetStringValueMap() {
    this.stringValueMap = null;
  }

  /** Returns true if field stringValueMap is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValueMap() {
    return this.stringValueMap != null;
  }

  public void setStringValueMapIsSet(boolean value) {
    if (!value) {
      this.stringValueMap = null;
    }
  }

  public int getUserListSize() {
    return (this.userList == null) ? 0 : this.userList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.ninlgde.rpc.thrift.User> getUserListIterator() {
    return (this.userList == null) ? null : this.userList.iterator();
  }

  public void addToUserList(com.ninlgde.rpc.thrift.User elem) {
    if (this.userList == null) {
      this.userList = new java.util.ArrayList<com.ninlgde.rpc.thrift.User>();
    }
    this.userList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.ninlgde.rpc.thrift.User> getUserList() {
    return this.userList;
  }

  public ContainerTypes setUserList(@org.apache.thrift.annotation.Nullable java.util.List<com.ninlgde.rpc.thrift.User> userList) {
    this.userList = userList;
    return this;
  }

  public void unsetUserList() {
    this.userList = null;
  }

  /** Returns true if field userList is set (has been assigned a value) and false otherwise */
  public boolean isSetUserList() {
    return this.userList != null;
  }

  public void setUserListIsSet(boolean value) {
    if (!value) {
      this.userList = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STRING_VALUE_LIST:
      if (value == null) {
        unsetStringValueList();
      } else {
        setStringValueList((java.util.List<java.lang.String>)value);
      }
      break;

    case STRING_VALUE_SET:
      if (value == null) {
        unsetStringValueSet();
      } else {
        setStringValueSet((java.util.Set<java.lang.String>)value);
      }
      break;

    case STRING_VALUE_MAP:
      if (value == null) {
        unsetStringValueMap();
      } else {
        setStringValueMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case USER_LIST:
      if (value == null) {
        unsetUserList();
      } else {
        setUserList((java.util.List<com.ninlgde.rpc.thrift.User>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STRING_VALUE_LIST:
      return getStringValueList();

    case STRING_VALUE_SET:
      return getStringValueSet();

    case STRING_VALUE_MAP:
      return getStringValueMap();

    case USER_LIST:
      return getUserList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STRING_VALUE_LIST:
      return isSetStringValueList();
    case STRING_VALUE_SET:
      return isSetStringValueSet();
    case STRING_VALUE_MAP:
      return isSetStringValueMap();
    case USER_LIST:
      return isSetUserList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ContainerTypes)
      return this.equals((ContainerTypes)that);
    return false;
  }

  public boolean equals(ContainerTypes that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_stringValueList = true && this.isSetStringValueList();
    boolean that_present_stringValueList = true && that.isSetStringValueList();
    if (this_present_stringValueList || that_present_stringValueList) {
      if (!(this_present_stringValueList && that_present_stringValueList))
        return false;
      if (!this.stringValueList.equals(that.stringValueList))
        return false;
    }

    boolean this_present_stringValueSet = true && this.isSetStringValueSet();
    boolean that_present_stringValueSet = true && that.isSetStringValueSet();
    if (this_present_stringValueSet || that_present_stringValueSet) {
      if (!(this_present_stringValueSet && that_present_stringValueSet))
        return false;
      if (!this.stringValueSet.equals(that.stringValueSet))
        return false;
    }

    boolean this_present_stringValueMap = true && this.isSetStringValueMap();
    boolean that_present_stringValueMap = true && that.isSetStringValueMap();
    if (this_present_stringValueMap || that_present_stringValueMap) {
      if (!(this_present_stringValueMap && that_present_stringValueMap))
        return false;
      if (!this.stringValueMap.equals(that.stringValueMap))
        return false;
    }

    boolean this_present_userList = true && this.isSetUserList();
    boolean that_present_userList = true && that.isSetUserList();
    if (this_present_userList || that_present_userList) {
      if (!(this_present_userList && that_present_userList))
        return false;
      if (!this.userList.equals(that.userList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStringValueList()) ? 131071 : 524287);
    if (isSetStringValueList())
      hashCode = hashCode * 8191 + stringValueList.hashCode();

    hashCode = hashCode * 8191 + ((isSetStringValueSet()) ? 131071 : 524287);
    if (isSetStringValueSet())
      hashCode = hashCode * 8191 + stringValueSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetStringValueMap()) ? 131071 : 524287);
    if (isSetStringValueMap())
      hashCode = hashCode * 8191 + stringValueMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserList()) ? 131071 : 524287);
    if (isSetUserList())
      hashCode = hashCode * 8191 + userList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ContainerTypes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStringValueList(), other.isSetStringValueList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValueList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValueList, other.stringValueList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStringValueSet(), other.isSetStringValueSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValueSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValueSet, other.stringValueSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStringValueMap(), other.isSetStringValueMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValueMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValueMap, other.stringValueMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUserList(), other.isSetUserList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userList, other.userList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ContainerTypes(");
    boolean first = true;

    sb.append("stringValueList:");
    if (this.stringValueList == null) {
      sb.append("null");
    } else {
      sb.append(this.stringValueList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringValueSet:");
    if (this.stringValueSet == null) {
      sb.append("null");
    } else {
      sb.append(this.stringValueSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringValueMap:");
    if (this.stringValueMap == null) {
      sb.append("null");
    } else {
      sb.append(this.stringValueMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userList:");
    if (this.userList == null) {
      sb.append("null");
    } else {
      sb.append(this.userList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContainerTypesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContainerTypesStandardScheme getScheme() {
      return new ContainerTypesStandardScheme();
    }
  }

  private static class ContainerTypesStandardScheme extends org.apache.thrift.scheme.StandardScheme<ContainerTypes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContainerTypes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRING_VALUE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.stringValueList = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.stringValueList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setStringValueListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRING_VALUE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.stringValueSet = new java.util.HashSet<java.lang.String>(2*_set3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.stringValueSet.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setStringValueSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING_VALUE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.stringValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key7;
                @org.apache.thrift.annotation.Nullable java.lang.String _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readString();
                  _val8 = iprot.readString();
                  struct.stringValueMap.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setStringValueMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.userList = new java.util.ArrayList<com.ninlgde.rpc.thrift.User>(_list10.size);
                @org.apache.thrift.annotation.Nullable com.ninlgde.rpc.thrift.User _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new com.ninlgde.rpc.thrift.User();
                  _elem11.read(iprot);
                  struct.userList.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setUserListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContainerTypes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stringValueList != null) {
        oprot.writeFieldBegin(STRING_VALUE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stringValueList.size()));
          for (java.lang.String _iter13 : struct.stringValueList)
          {
            oprot.writeString(_iter13);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stringValueSet != null) {
        oprot.writeFieldBegin(STRING_VALUE_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.stringValueSet.size()));
          for (java.lang.String _iter14 : struct.stringValueSet)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stringValueMap != null) {
        oprot.writeFieldBegin(STRING_VALUE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stringValueMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.stringValueMap.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userList != null) {
        oprot.writeFieldBegin(USER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userList.size()));
          for (com.ninlgde.rpc.thrift.User _iter16 : struct.userList)
          {
            _iter16.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContainerTypesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContainerTypesTupleScheme getScheme() {
      return new ContainerTypesTupleScheme();
    }
  }

  private static class ContainerTypesTupleScheme extends org.apache.thrift.scheme.TupleScheme<ContainerTypes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContainerTypes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStringValueList()) {
        optionals.set(0);
      }
      if (struct.isSetStringValueSet()) {
        optionals.set(1);
      }
      if (struct.isSetStringValueMap()) {
        optionals.set(2);
      }
      if (struct.isSetUserList()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStringValueList()) {
        {
          oprot.writeI32(struct.stringValueList.size());
          for (java.lang.String _iter17 : struct.stringValueList)
          {
            oprot.writeString(_iter17);
          }
        }
      }
      if (struct.isSetStringValueSet()) {
        {
          oprot.writeI32(struct.stringValueSet.size());
          for (java.lang.String _iter18 : struct.stringValueSet)
          {
            oprot.writeString(_iter18);
          }
        }
      }
      if (struct.isSetStringValueMap()) {
        {
          oprot.writeI32(struct.stringValueMap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter19 : struct.stringValueMap.entrySet())
          {
            oprot.writeString(_iter19.getKey());
            oprot.writeString(_iter19.getValue());
          }
        }
      }
      if (struct.isSetUserList()) {
        {
          oprot.writeI32(struct.userList.size());
          for (com.ninlgde.rpc.thrift.User _iter20 : struct.userList)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContainerTypes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.stringValueList = new java.util.ArrayList<java.lang.String>(_list21.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.stringValueList.add(_elem22);
          }
        }
        struct.setStringValueListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
          struct.stringValueSet = new java.util.HashSet<java.lang.String>(2*_set24.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem25;
          for (int _i26 = 0; _i26 < _set24.size; ++_i26)
          {
            _elem25 = iprot.readString();
            struct.stringValueSet.add(_elem25);
          }
        }
        struct.setStringValueSetIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.stringValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map27.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key28;
          @org.apache.thrift.annotation.Nullable java.lang.String _val29;
          for (int _i30 = 0; _i30 < _map27.size; ++_i30)
          {
            _key28 = iprot.readString();
            _val29 = iprot.readString();
            struct.stringValueMap.put(_key28, _val29);
          }
        }
        struct.setStringValueMapIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list31 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.userList = new java.util.ArrayList<com.ninlgde.rpc.thrift.User>(_list31.size);
          @org.apache.thrift.annotation.Nullable com.ninlgde.rpc.thrift.User _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new com.ninlgde.rpc.thrift.User();
            _elem32.read(iprot);
            struct.userList.add(_elem32);
          }
        }
        struct.setUserListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

